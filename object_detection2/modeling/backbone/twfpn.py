import math
import tensorflow as tf
import wmodule
import functools
from .backbone import Backbone
from .build import BACKBONE_REGISTRY,build_backbone_by_name
from .resnet import build_resnet_backbone
from .shufflenetv2 import build_shufflenetv2_backbone
import collections
import object_detection2.od_toolkit as odt
from .build import build_backbone_hook_by_name
import wnnlayer as wnnl
from itertools import count

slim = tf.contrib.slim

class TwoWayFPN(Backbone):
    def __init__(
        self, cfg,bottom_up, in_features, out_channels, fuse_type="sum",
            parent=None,*args,**kwargs
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate TwoWayFPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which TwoWayFPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        stage = int(in_features[-1][1:])
        super(TwoWayFPN, self).__init__(cfg,parent=parent,*args,**kwargs)
        assert isinstance(bottom_up, Backbone)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.in_features = in_features
        self.bottom_up = bottom_up
        self.out_channels = out_channels
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type
        self.scope = "TwoWayFPN"
        self.use_depthwise = False
        self.interpolate_op=tf.image.resize_nearest_neighbor
        self.stage = stage
        #Detectron2默认没有使用normalizer, 但在测试数据集上发现不使用normalizer网络不收敛
        self.normalizer_fn,self.normalizer_params = odt.get_norm(self.cfg.MODEL.TWOWAYFPN.NORM,self.is_training)
        self.hook0_before,self.hook0_after = build_backbone_hook_by_name(cfg.MODEL.TWOWAYFPN.BACKBONE_HOOK,cfg,parent=self)
        if len(cfg.MODEL.TWOWAYFPN.BACKBONE_HOOK)>=4:
            self.hook1_before,self.hook1_after = build_backbone_hook_by_name(cfg.MODEL.TWOWAYFPN.BACKBONE_HOOK[2:],cfg,parent=self)
        else:
            self.hook1_before, self.hook1_after = build_backbone_hook_by_name(["",""],cfg,
                                                                              parent=self)
        self.activation_fn = odt.get_activation_fn(self.cfg.MODEL.TWOWAYFPN.ACTIVATION_FN)


    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to TwoWayFPN feature map tensor
                in high to low resolution order. Returned feature names follow the TwoWayFPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_features = self.bottom_up(x)
        image_features = [bottom_up_features[f] for f in self.in_features]
        res0 = self.forward_with_given_features(x,image_features,[self.hook0_before,self.hook0_after],'FPN_a')
        res1 = self.forward_with_given_features(x,image_features,[self.hook1_before,self.hook1_after],'FPN_b')
        return [res0,res1]

    def forward_with_given_features(self, x,image_features,hooks,scope):
        with tf.variable_scope(scope):
            hook_before,hook_after = hooks
            if hook_before is not None:
                image_features = hook_before(image_features,x)
            use_depthwise = self.use_depthwise
            depth = self.out_channels
            fusion_fn = odt.get_fusion_fn(self._fuse_type)
            with tf.variable_scope(self.scope, 'top_down'):
                num_levels = len(image_features)
                output_feature_maps_list = []
                output_feature_map_keys = []
                padding = 'SAME'
                kernel_size = 3
                weight_decay = 1e-4
                if self.normalizer_fn is not None:
                    normalizer_fn = functools.partial(self.normalizer_fn,**self.normalizer_params)
                else:
                    normalizer_fn = None
                if use_depthwise:
                    conv_op = functools.partial(slim.separable_conv2d,
                                                depth_multiplier=1,
                                                normalizer_fn=normalizer_fn,
                                                activation_fn=self.activation_fn)
                else:
                    conv_op = functools.partial(slim.conv2d,
                                                weights_regularizer=slim.l2_regularizer(weight_decay),
                                                normalizer_fn=normalizer_fn,
                                                activation_fn=self.activation_fn)
                if self.cfg.MODEL.FPN.ENABLE_DROPBLOCK and self.is_training:
                    keep_prob = wnnl.get_dropblock_keep_prob(tf.train.get_or_create_global_step(),self.cfg.SOLVER.STEPS[-1],
                                                             max_keep_prob=self.cfg.MODEL.FPN.KEEP_PROB)
                    if self.cfg.GLOBAL.SUMMARY_LEVEL <= SummaryLevel.DEBUG:
                        tf.summary.scalar(name="fpn_keep_prob",tensor=keep_prob)
                    image_features = [wnnl.dropblock(x,keep_prob,self.is_training,block_size=self.cfg.MODEL.FPN.DROPBLOCK_SIZE) for x in image_features]

                with slim.arg_scope(
                        [slim.conv2d], padding=padding, stride=1):
                    prev_features = slim.conv2d(
                        image_features[-1],
                        depth, [1, 1], activation_fn=None, normalizer_fn=None,
                        scope='projection_%d' % num_levels)
                    output = conv_op(prev_features, depth,[kernel_size, kernel_size], scope=f"output_{num_levels}")
                    output_feature_maps_list.append(output)
                    output_feature_map_keys.append(f"P{self.stage}")

                    for level in reversed(range(num_levels - 1)):
                        lateral_features = slim.conv2d(
                            image_features[level], depth, [1, 1],
                            activation_fn=None, normalizer_fn=None,
                            scope='projection_%d' % (level + 1))
                        shape = tf.shape(lateral_features)[1:3]
                        top_down = self.interpolate_op(prev_features, shape)
                        #prev_features = top_down + lateral_features
                        prev_features = fusion_fn([top_down,lateral_features])
                        output_feature_maps_list.append(conv_op(
                            prev_features,
                            depth, [kernel_size, kernel_size],
                            scope=f'output_{level + 1}'))
                        output_feature_map_keys.append(f"P{self.stage+level-num_levels+1}")
            output_feature_map_keys.reverse()
            output_feature_maps_list.reverse()
            res = collections.OrderedDict(zip(output_feature_map_keys, output_feature_maps_list))
            self.low_features = bottom_up_features
            if hook_after is not None:
                res = hook_after(res,x)
            res.update(bottom_up_features)
            return res


@BACKBONE_REGISTRY.register()
def build_resnet_twfpn_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg,*args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone



@BACKBONE_REGISTRY.register()
def build_shufflenetv2_twfpn_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_shufflenetv2_backbone(cfg, *args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone



@BACKBONE_REGISTRY.register()
def build_any_twfpn_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_backbone_by_name(cfg.MODEL.TWOWAYFPN.BACKBONE,cfg, *args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone


import math
import tensorflow as tf
import wmodule
import functools
from .backbone import Backbone
from .build import BACKBONE_REGISTRY,build_backbone_by_name
from .resnet import build_resnet_backbone
from .shufflenetv2 import build_shufflenetv2_backbone
import collections
import object_detection2.od_toolkit as odt
from .build import build_backbone_hook
from itertools import count

slim = tf.contrib.slim

class TwoWayFPN(Backbone):
    """
    Implement 'EfficientPS: Efficient Panoptic Segmentation'
    """

    def __init__(
        self, cfg,bottom_up, in_features, out_channels, fuse_type="sum",
            parent=None,*args,**kwargs
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate TwoWayFPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which TwoWayFPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        stage = int(in_features[0][1:])
        super(TwoWayFPN, self).__init__(cfg,parent=parent,*args,**kwargs)
        assert isinstance(bottom_up, Backbone)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.in_features = in_features
        self.bottom_up = bottom_up
        self.out_channels = out_channels
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type
        self.scope = "TwoWayFPN"
        self.use_depthwise = False
        self.interpolate_op=tf.image.resize_nearest_neighbor
        self.stage = stage
        #Detectron2默认没有使用normalizer, 但在测试数据集上发现不使用normalizer网络不收敛
        self.normalizer_fn,self.normalizer_params = odt.get_norm(self.cfg.MODEL.TWOWAYFPN.NORM,self.is_training)
        self.hook_before,self.hook_after = build_backbone_hook(cfg.MODEL.TWOWAYFPN,parent=self)
        self.activation_fn = odt.get_activation_fn(self.cfg.MODEL.TWOWAYFPN.ACTIVATION_FN)


    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to TwoWayFPN feature map tensor
                in high to low resolution order. Returned feature names follow the TwoWayFPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_features = self.bottom_up(x)
        if self.hook_before is not None:
            bottom_up_features = self.hook_before(bottom_up_features,x)
        feature_maps = [bottom_up_features[f] for f in self.in_features]
        use_depthwise = self.use_depthwise
        depths = self.out_channels
        weight_decay = 1e-4

        if use_depthwise:
            conv_op = functools.partial(slim.separable_conv2d,
                                        depth_multiplier=1,
                                        normalizer_fn=self.normalizer_fn,
                                        normalizer_params=self.normalizer_params,
                                        activation_fn=self.activation_fn)
        else:
            conv_op = functools.partial(slim.conv2d,
                                        weights_regularizer=slim.l2_regularizer(weight_decay),
                                        normalizer_fn=self.normalizer_fn,
                                        normalizer_params=self.normalizer_params,
                                        activation_fn=self.activation_fn)

        mid_feature_maps_td = []
        mid_feature_maps_bu = []
        out_feature_maps = []
        out_feature_map_keys = []
        with tf.variable_scope("two_way_fpn"):
            feature_maps.reverse()
            with tf.variable_scope("top_down"):
                last = None
                for i in range(len(feature_maps)):
                    with tf.variable_scope(f"down_node{i}"):
                        net = conv_op(feature_maps[i],depths,[1,1])
                        if last is not None:
                            shape = tf.shape(feature_maps[i])[1:3]
                            last = self.interpolate_op(last, size=shape, name=f"upsample{i}")
                            last = odt.fusion([last, net], depth=depths, scope=f"td_fusion{i}")
                        else:
                            last = net
                        mid_feature_maps_td.append(last)

            mid_feature_maps_td.reverse()

            with tf.variable_scope("bottom_up"):
                feature_maps.reverse()
                last = None
                for i in range(len(feature_maps)):
                    with tf.variable_scope(f"up_node{i}"):
                        net = conv_op(feature_maps[i],depths,[1,1])
                        if last is not None:
                            last = slim.avg_pool2d(last, [2, 2], padding='SAME', stride=2, scope=f"max_pool{i}")
                            last = odt.fusion([last, net], depth=depths, scope=f"bu_fusion{i}")
                        else:
                            last = net
                        mid_feature_maps_bu.append(last)

            with tf.variable_scope("output_smooth"):
                for i,net0,net1 in zip(count(),mid_feature_maps_td,mid_feature_maps_bu):
                    net = net0+net1
                    net = slim.separable_conv2d(net,None,[3,3],
                                                activation_fn=self.activation_fn,
                                                normalizer_fn=self.normalizer_fn,
                                                normalizer_params=self.normalizer_params,
                                                depth_multiplier=1)
                    out_feature_maps.append(net)
                    out_feature_map_keys.append(f"P{self.stage+i}")

        res = collections.OrderedDict(zip(out_feature_map_keys, out_feature_maps))
        if self.hook_after is not None:
            res = self.hook_after(res,x)
        return res



@BACKBONE_REGISTRY.register()
def build_resnet_twfpn_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg,*args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone



@BACKBONE_REGISTRY.register()
def build_shufflenetv2_twfpn_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_shufflenetv2_backbone(cfg, *args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone



@BACKBONE_REGISTRY.register()
def build_any_twfpn_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_backbone_by_name(cfg.MODEL.TWOWAYFPN.BACKBONE,cfg, *args,**kwargs)
    in_features = cfg.MODEL.TWOWAYFPN.IN_FEATURES
    out_channels = cfg.MODEL.TWOWAYFPN.OUT_CHANNELS
    backbone = TwoWayFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.TWOWAYFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone


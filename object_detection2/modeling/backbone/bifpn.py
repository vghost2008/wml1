import math
import tensorflow as tf
import wmodule
import functools
from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone
from .shufflenetv2 import build_shufflenetv2_backbone
import collections
import object_detection2.od_toolkit as odt
import object_detection2.architectures_tools as odat

slim = tf.contrib.slim

class BIFPN(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, cfg,bottom_up, in_features, out_channels, fuse_type="sum",
            *args,**kwargs
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate BIFPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which BIFPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                BIFPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra BIFPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        stage = int(in_features[-1][1:])
        super(BIFPN, self).__init__(cfg,*args,**kwargs)
        assert isinstance(bottom_up, Backbone)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.in_features = in_features
        self.bottom_up = bottom_up
        self.out_channels = out_channels
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type
        self.scope = "BIFPN"
        self.use_depthwise = False
        self.interpolate_op=tf.image.resize_nearest_neighbor
        self.stage = stage
        self.normalizer_fn,self.norm_params = odt.get_norm(self.cfg.MODEL.BIFPN.NORM,self.is_training)


    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to BIFPN feature map tensor
                in high to low resolution order. Returned feature names follow the BIFPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        image_features = [bottom_up_features[f] for f in self.in_features]
        use_depthwise = self.use_depthwise
        depth = self.out_channels
        feature_maps = []

        if self.normalizer_fn is not None:
            normalizer_fn = functools.partial(self.normalizer_fn,**self.norm_params)
        else:
            normalizer_fn = None

        padding = 'SAME'
        kernel_size = 3
        weight_decay = 1e-4

        if use_depthwise:
            conv_op = functools.partial(slim.separable_conv2d, depth_multiplier=1,
                                        normalizer_fn=normalizer_fn,
                                        padding=padding)
        else:
            conv_op = functools.partial(slim.conv2d,
                                        weights_regularizer=slim.l2_regularizer(weight_decay),
                                        normalizer_fn=normalizer_fn,
                                        padding=padding)

        with tf.name_scope(self.scope,"BIFPN"):
            for i,net in enumerate(image_features):
                net = conv_op(net,depth,kernel_size=kernel_size,scope=f"projection_{i}")
                feature_maps.append(net)
            feature_maps.reverse()
            repeat = self.cfg.MODEL.BIFPN.REPEAT

            for i in range(repeat):
                feature_maps = odat.BiFPN(feature_maps,conv_op=conv_op,scope=f"BiFPN{i}")
            feature_maps.reverse()

            res = collections.OrderedDict()
            for name,net in zip(self.in_features,feature_maps):
                index = int(name[1:])
                res[f"P{index}"] = net
            return res


@BACKBONE_REGISTRY.register()
def build_resnet_bifpn_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg,*args,**kwargs)
    in_features = cfg.MODEL.BIFPN.IN_FEATURES
    out_channels = cfg.MODEL.BIFPN.OUT_CHANNELS
    backbone = BIFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.BIFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_shufflenetv2_bifpn_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_shufflenetv2_backbone(cfg,*args,**kwargs)
    in_features = cfg.MODEL.BIFPN.IN_FEATURES
    out_channels = cfg.MODEL.BIFPN.OUT_CHANNELS
    backbone = BIFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.BIFPN.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone

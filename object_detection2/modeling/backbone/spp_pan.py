import math
import tensorflow as tf
import wmodule
import functools
from .backbone import Backbone
import basic_tftools as btf
from .build import BACKBONE_REGISTRY,build_backbone_by_name
from .resnet import build_resnet_backbone
from .resnetv2 import build_resnetv2_backbone
from .shufflenetv2 import build_shufflenetv2_backbone
import collections
import object_detection2.od_toolkit as odt
from .build import build_backbone_hook
import wnnlayer as wnnl
from object_detection2.datadef import *

slim = tf.contrib.slim

'''
YOLO V4
'''
class SPP_PAN(Backbone):
    def __init__(
            self, cfg, bottom_up, in_features, out_channels,
            parent=None, *args, **kwargs
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate SPP_PAN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which SPP_PAN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                SPP_PAN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra SPP_PAN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        stage = int(in_features[-1][1:])
        super(SPP_PAN, self).__init__(cfg, parent=parent, *args, **kwargs)
        assert isinstance(bottom_up, Backbone)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.in_features = in_features
        self.bottom_up = bottom_up
        self.out_channels = out_channels
        self.scope = "SPP_PAN"
        self.interpolate_op = tf.image.resize_nearest_neighbor
        self.stage = stage
        # Detectron2默认没有使用normalizer, 但在测试数据集上发现不使用normalizer网络不收敛
        self.normalizer_fn, self.norm_params = odt.get_norm(self.cfg.MODEL.SPP_PAN.NORM, self.is_training)
        self.hook_before, self.hook_after = build_backbone_hook(cfg.MODEL.SPP_PAN, parent=self)
        self.activation_fn = odt.get_activation_fn(self.cfg.MODEL.SPP_PAN.ACTIVATION_FN)

    def SPP(self,x):
        with tf.name_scope("SPP"):
            x0 = slim.max_pool2d(x,5,1,padding="SAME")
            x1 = slim.max_pool2d(x,9,1,padding="SAME")
            x2 = slim.max_pool2d(x,13,1,padding="SAME")
            return tf.concat([x,x0,x1,x2],axis=-1)
    def conv_block(self,x,chs,three_conv=False,name=None):
        with tf.variable_scope(name,default_name="conv_block"):
            x = slim.conv2d(x, chs, 1,
                            normalizer_fn=self.normalizer_fn,
                            normalizer_params=self.norm_params,
                            activation_fn=self.activation_fn
                            )

            x = slim.conv2d(x, chs*2, 3,
                            normalizer_fn=self.normalizer_fn,
                            normalizer_params=self.norm_params,
                            activation_fn=self.activation_fn
                            )
            if three_conv:
                x = slim.conv2d(x, chs, 1,
                                normalizer_fn=self.normalizer_fn,
                                normalizer_params=self.norm_params,
                                activation_fn=self.activation_fn
                                )
            return x

    def process_c5(self,x):
        with tf.variable_scope("process_c5"):
            x = self.conv_block(x,512,True,name="block0")
            x = self.SPP(x)
            x = self.conv_block(x,512,True,name="block1")
            return x

    def process_c4(self,x):
        with tf.variable_scope("process_c4"):
            x = self.conv_block(x,256,False,name="block0")
            x = self.conv_block(x,256,True,name="block1")
            return x

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to SPP_PAN feature map tensor
                in high to low resolution order. Returned feature names follow the SPP_PAN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        #x['image'] = tf.Print(x['image'],[tf.shape(x['image'],"-------------------")])
        bottom_up_features = self.bottom_up(x)
        if self.hook_before is not None:
            bottom_up_features = self.hook_before(bottom_up_features,x)
        assert len(self.in_features)==3,"Error in features"
        image_features = [bottom_up_features[f] for f in self.in_features]

        with tf.variable_scope(self.scope, 'SPP_PAN'):

            if self.cfg.MODEL.SPP_PAN.ENABLE_DROPBLOCK and self.is_training:
                keep_prob = wnnl.get_dropblock_keep_prob(tf.train.get_or_create_global_step(),self.cfg.SOLVER.STEPS[-1],
                                                         max_keep_prob=self.cfg.MODEL.SPP_PAN.KEEP_PROB)
                if self.cfg.GLOBAL.SUMMARY_LEVEL <= SummaryLevel.DEBUG:
                    tf.summary.scalar(name="fpn_keep_prob",tensor=keep_prob)
                image_features = [wnnl.dropblock(x,keep_prob,self.is_training,block_size=self.cfg.MODEL.SPP_PAN.DROPBLOCK_SIZE) for x in image_features]

            net_c5 = self.process_c5(image_features[-1])
            net_c5_upsample = slim.conv2d(net_c5, 256, 1,
                            normalizer_fn=self.normalizer_fn,
                            normalizer_params=self.norm_params,
                            activation_fn=self.activation_fn
                            )
            net_c5_upsample = btf.resize_to(net_c5_upsample,image_features[-2])
            net_c4 = slim.conv2d(image_features[-2], 256, 1,
                                 normalizer_fn=self.normalizer_fn,
                                 normalizer_params=self.norm_params,
                                 activation_fn=self.activation_fn
                                 )
            net_c4 = tf.concat([net_c5_upsample,net_c4],axis=-1)
            net_c4 =self.process_c4(net_c4)
            net_c4_upsample = slim.conv2d(net_c4, 256, 1,
                                          normalizer_fn=self.normalizer_fn,
                                          normalizer_params=self.norm_params,
                                          activation_fn=self.activation_fn
                                          )
            net_c4_upsample = btf.resize_to(net_c4_upsample,image_features[-3])
            net_c3 = slim.conv2d(image_features[-3], 128, 1,
                                 normalizer_fn=self.normalizer_fn,
                                 normalizer_params=self.norm_params,
                                 activation_fn=self.activation_fn
                                 )
            net_c3 = tf.concat([net_c4_upsample,net_c3],axis=-1)
            net_c3_downsample = slim.conv2d(net_c3, 256, 3,
                                            stride=2,
                                            normalizer_fn=self.normalizer_fn,
                                            normalizer_params=self.norm_params,
                                            activation_fn=self.activation_fn
                                            )
            net_c4 = tf.concat([net_c4,net_c3_downsample],axis=-1)
            net_c4_downsample = slim.conv2d(net_c4, 256, 3,
                                            stride=2,
                                            normalizer_fn=self.normalizer_fn,
                                            normalizer_params=self.norm_params,
                                            activation_fn=self.activation_fn
                                            )
            net_c5 = tf.concat([net_c4_downsample,net_c5],axis=-1)

        res = OrderedDict()
        res_data = [net_c3,net_c4,net_c5]
        for k,v in zip(self.in_features,res_data):
            k = "P"+k[1:]
            res[k] = v
        if self.hook_after is not None:
            res = self.hook_after(res,x)
        res.update(bottom_up_features)
        return res

@BACKBONE_REGISTRY.register()
def build_any_spp_pan_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_backbone_by_name(cfg.MODEL.SPP_PAN.BACKBONE,cfg, *args,**kwargs)
    in_features = cfg.MODEL.SPP_PAN.IN_FEATURES
    out_channels = cfg.MODEL.SPP_PAN.OUT_CHANNELS
    backbone = SPP_PAN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone

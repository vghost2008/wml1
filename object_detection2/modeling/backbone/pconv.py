import math
import tensorflow as tf
import wmodule
import functools
from .backbone import Backbone
from .build import BACKBONE_REGISTRY,build_backbone_by_name
from .resnet import build_resnet_backbone
from .shufflenetv2 import build_shufflenetv2_backbone
import collections
import object_detection2.od_toolkit as odt
from .build import build_backbone_hook
from itertools import count
import wml_tfutils as wmlt

slim = tf.contrib.slim

class PConv(Backbone):
    """
    Implement 'Scale-Equalizing Pyramid Convolution for Object Detection'
    """

    def __init__(
        self, cfg,bottom_up, in_features, out_channels, fuse_type="sum",
            parent=None,*args,**kwargs
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate PConv levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which PConv is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        stage = int(in_features[0][1:])
        super(PConv, self).__init__(cfg,parent=parent,*args,**kwargs)
        assert isinstance(bottom_up, Backbone)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.in_features = in_features
        self.bottom_up = bottom_up
        self.out_channels = out_channels
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type
        self.scope = "PConv"
        self.use_depthwise = False
        self.interpolate_op=tf.image.resize_nearest_neighbor
        self.stage = stage
        #Detectron2默认没有使用normalizer, 但在测试数据集上发现不使用normalizer网络不收敛
        self.normalizer_fn,self.normalizer_params = odt.get_norm(self.cfg.MODEL.PCONV.NORM,self.is_training)
        self.hook_before,self.hook_after = build_backbone_hook(cfg.MODEL.PCONV,parent=self)
        self.activation_fn = odt.get_activation_fn(self.cfg.MODEL.PCONV.ACTIVATION_FN)
        self.num_convs = self.cfg.MODEL.PCONV.NUM_CONVS


    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to PConv feature map tensor
                in high to low resolution order. Returned feature names follow the PConv
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_features = self.bottom_up(x)
        if self.hook_before is not None:
            bottom_up_features = self.hook_before(bottom_up_features,x)
        feature_maps = [bottom_up_features[f] for f in self.in_features]
        depths = self.out_channels
        weight_decay = 1e-4

        conv_op = functools.partial(slim.conv2d,
                                        weights_regularizer=slim.l2_regularizer(weight_decay))

        out_feature_map_keys = []
        def process(nets):
            net0,net1,net2 = nets
            nets = []
            if net0 is not None:
                net0 = conv_op(net0, depths, [1, 1],
                          activation_fn=self.activation_fn,
                          normalizer_fn=self.normalizer_fn,
                          normalizer_params=self.normalizer_params,
                          rate=2,
                          scope="conv1"
                          )
                net0 = slim.avg_pool2d(net0, [2, 2], padding='SAME', stride=2, scope=f"avg_pool")
                nets.append(net0)
            net1 = conv_op(net1, depths, [1, 1],
                           activation_fn=self.activation_fn,
                           normalizer_fn=self.normalizer_fn,
                           normalizer_params=self.normalizer_params,
                           scope="conv2"
                           )
            nets.append(net1)
            if net2 is not None:
                net2 = conv_op(net2, depths, [1, 1],
                           activation_fn=self.activation_fn,
                           normalizer_fn=self.normalizer_fn,
                           normalizer_params=self.normalizer_params,
                           scope="conv3"
                           )
                shape = wmlt.combined_static_and_dynamic_shape(net1)
                net2 = self.interpolate_op(net2,shape[1:3],name="upsample")
                nets.append(net2)
            return tf.add_n(nets)

        with tf.variable_scope("PConv"):
            mid_feature_maps = []
            for i,net in enumerate(feature_maps):
                mid_feature_maps.append(conv_op(net,depths,[1,1],normalizer_fn=None,
                                                activation_fn=None,scope=f"projection{i}"))
            feature_maps = mid_feature_maps

            for l in range(self.num_convs):
                with tf.variable_scope(f"repeat{l}",reuse=tf.AUTO_REUSE):
                    feature_maps = [None]+feature_maps+[None]
                    mid_feature_maps = []
                    for i in range(len(feature_maps)-2):
                        with tf.name_scope(f"layer{i}"):
                            mid_feature_maps.append(process(feature_maps[i:i+3]))
                    feature_maps = mid_feature_maps

        for i in range(len(feature_maps)):
            out_feature_map_keys.append(f"P{self.stage+i}")

        res = collections.OrderedDict(zip(out_feature_map_keys, feature_maps))
        if self.hook_after is not None:
            res = self.hook_after(res,x)
        return res

@BACKBONE_REGISTRY.register()
def build_resnet_pconv_backbone(cfg,*args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg,*args,**kwargs)
    in_features = cfg.MODEL.PCONV.IN_FEATURES
    out_channels = cfg.MODEL.PCONV.OUT_CHANNELS
    backbone = PConv(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.PCONV.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_shufflenetv2_pconv_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_shufflenetv2_backbone(cfg, *args,**kwargs)
    in_features = cfg.MODEL.PCONV.IN_FEATURES
    out_channels = cfg.MODEL.PCONV.OUT_CHANNELS
    backbone = PConv(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.PCONV.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_any_pconv_backbone(cfg, *args,**kwargs):
    """
    Args:
        cfg: a CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_backbone_by_name(cfg.MODEL.PCONV.BACKBONE,cfg, *args,**kwargs)
    in_features = cfg.MODEL.PCONV.IN_FEATURES
    out_channels = cfg.MODEL.PCONV.OUT_CHANNELS
    backbone = PConv(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        fuse_type=cfg.MODEL.PCONV.FUSE_TYPE,
        cfg=cfg,
        *args,
        **kwargs
    )
    return backbone
